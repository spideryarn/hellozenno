{% extends "base.jinja" %}

{% block title %}
    URL Registry Example
{% endblock title %}

{% block content %}
<div class="container">
    <h1>URL Registry TypeScript Example</h1>
    
    <p>
        This page demonstrates using the URL registry TypeScript utilities for type-safe URL resolution in Svelte components.
    </p>
    
    <div id="route-registry-example" data-wordform="γεια" data-target-language-code="el"></div>
    
    <div class="code-example">
        <h3>Svelte Component Code</h3>
        <pre><code>// RouteRegistryExample.svelte
&lt;script lang="ts"&gt;
  import { onMount } from 'svelte';
  import { RouteName, resolveRoute } from '../../static/js/generated/routes';

  export let wordform: string;
  export let target_language_code: string;

  let previewData: any = null;
  let loading = false;
  let error: string | null = null;

  async function fetchWordPreview() {
    loading = true;
    error = null;
    
    try {
      // Type-safe route resolution
      const url = resolveRoute(RouteName.WORDFORM_API_WORD_PREVIEW, {
        target_language_code: target_language_code,
        word: wordform
      });
      
      const response = await fetch(url);
      
      if (!response.ok) {
        throw new Error(`API request failed: ${response.status}`);
      }
      
      previewData = await response.json();
    } catch (err) {
      error = err.message;
    } finally {
      loading = false;
    }
  }
  
  onMount(fetchWordPreview);
&lt;/script&gt;

&lt;div class="word-preview"&gt;
  {#if loading}
    &lt;p&gt;Loading...&lt;/p&gt;
  {:else if error}
    &lt;p class="error"&gt;Error: {error}&lt;/p&gt;
  {:else if previewData}
    &lt;h4&gt;{previewData.lemma}&lt;/h4&gt;
    {#if previewData.translation}
      &lt;p class="translation"&gt;Translation: {previewData.translation}&lt;/p&gt;
    {/if}
  {/if}
&lt;/div&gt;</code></pre>
    </div>
    
    <div class="notes">
        <h3>Key Benefits</h3>
        <ul>
            <li><strong>Type Safety</strong>: TypeScript ensures all required parameters are provided</li>
            <li><strong>Auto-completion</strong>: IDE suggests available routes and parameters</li>
            <li><strong>Refactoring Support</strong>: Changing routes in Flask updates TypeScript definitions</li>
            <li><strong>Error Prevention</strong>: Catch URL errors at compile time, not runtime</li>
        </ul>
    </div>
</div>
{% endblock content %}

{% block head_css %}
<style>
    .container {
        max-width: 900px;
        margin: 0 auto;
        padding: 20px;
    }
    
    .code-example {
        margin: 2rem 0;
    }
    
    .code-example pre {
        background-color: #f8fafc;
        padding: 1rem;
        border-radius: 0.5rem;
        overflow-x: auto;
        border: 1px solid #e2e8f0;
    }
    
    .code-example code {
        font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, monospace;
        font-size: 0.875rem;
        color: #334155;
    }
    
    .notes {
        background-color: #f0f9ff;
        border-left: 4px solid #0ea5e9;
        padding: 1rem;
        margin: 2rem 0;
        border-radius: 0 0.5rem 0.5rem 0;
    }
    
    .notes h3 {
        margin-top: 0;
        color: #0369a1;
    }
    
    .notes ul {
        margin: 0;
        padding-left: 1.5rem;
    }
    
    .notes li {
        margin-bottom: 0.5rem;
    }
</style>
{% endblock head_css %}

{% block late_script_imports %}
    {{ super() }}
    <!-- Load the route registry example component -->
    {% if config.IS_PRODUCTION %}
        <script src="{{ url_for('static', filename='build/route-registry-example.js') }}" defer></script>
    {% endif %}
{% endblock late_script_imports %}

{% block head_imports %}
    {{ super() }}
    <!-- Load the Vite entry in development mode -->
    {% if not config.IS_PRODUCTION %}
        <script type="module" src="http://localhost:5173/src/entries/route-registry-example.ts"></script>
    {% endif %}
{% endblock head_imports %}