{% macro load_svelte_component(component_name, props={}, component_id='') %}
  {# Create div with a unique ID for the component to mount to #}
  <div id="{{ component_id if component_id else component_name | lower + '-component' }}" data-svelte-component="{{ component_name }}"
       data-props="{{ props | tojson | replace('"', '&quot;') }}">
    {# Add a loading state that will be replaced when component mounts #}
    <div class="svelte-component-loading" id="{{ component_id if component_id else component_name | lower + '-loading' }}">
      <!-- Loading placeholder that will be cleared on mount -->
      <p class="loading-text">Loading component...</p>
    </div>
  </div>
  {% if not config.IS_PRODUCTION %}
    {# Development mode - use Vite dev server #}
    <script type="module">
      // Debug flags - disabled in normal operation, can be enabled for troubleshooting
      const SVELTE_DEBUG = false;
      const debugLog = (msg, ...args) => {
        SVELTE_DEBUG && console.log(`[SVELTE DEBUG] ${msg}`, ...args);
      };
      
      // Log initial attempt
      debugLog(`Starting mount for ${JSON.stringify({
        component: "{{ component_name }}",
        mountPoint: "{{ component_id if component_id else component_name | lower + '-component' }}",
        props: {{ props | tojson | safe }},
        viteDev: true
      })}`);
      
      // Immediately log what we're going to try to import
      const importUrl = 'http://localhost:5173/src/entries/{{ component_name | lower }}.ts';
      debugLog("Import URL:", importUrl);
      
      // Create a test fetch to see if Vite server is accessible
      fetch(importUrl).then(
        response => debugLog(`Vite server responded with status: ${response.status}`),
        error => debugLog(`Vite server error: ${error.message}`)
      );
      
      try {
        debugLog("Attempting dynamic import...");
        
        // Dynamic import
        import(importUrl).then(
          module => {
            debugLog("Module imported successfully:", module);
            
            if (!module.default) {
              throw new Error(`Module ${importUrl} does not have a default export`);
            }
            
            // Find target element
            const targetElement = document.getElementById('{{ component_id if component_id else component_name | lower + "-component" }}');
            debugLog("Target element:", targetElement);
            
            if (!targetElement) {
              throw new Error(`Target element #{{ component_id if component_id else component_name | lower + "-component" }} not found`);
            }
            
            // Mount component
            const props = {{ props | tojson | safe }};
            
            // Process props to ensure correct types (especially for HTML content)
            if (props.enhanced_sentence_text !== undefined) {
              // Ensure enhanced_sentence_text is a string
              debugLog("Processing enhanced_sentence_text prop");
              if (typeof props.enhanced_sentence_text !== 'string') {
                console.warn("enhanced_sentence_text is not a string - converting");
                props.enhanced_sentence_text = String(props.enhanced_sentence_text || '');
              }
            }
            
            debugLog("Mounting with props:", props);
            
            // Clear any loading state or content before mounting
            debugLog(`Clearing mount point: ${targetElement.id}`);
            targetElement.innerHTML = '';
            
            // Mount the component
            debugLog(`Creating component with props:`, props);
            const component = module.default(targetElement, props);
            debugLog("Component mounted successfully:", component);
            
            // Dispatch event to notify successful mounting (useful for communication between components)
            const event = new CustomEvent('SvelteComponentMounted', { 
              detail: { 
                componentName: '{{ component_name }}',
                elementId: targetElement.id
              },
              bubbles: true 
            });
            document.dispatchEvent(event);
            
          },
          error => {
            debugLog("Import failed:", error);
            console.error(`Failed to import ${importUrl}:`, error);
          }
        );
      } catch (error) {
        debugLog("Critical error in component loading:", error);
        console.error(`Error loading Svelte component {{ component_name }}:`, error);
      }
    </script>
  {% else %}
    {# Production mode - use built files #}
    <script type="module">
      // Debug flags for troubleshooting production issues
      const PROD_DEBUG = true;
      const debugLog = (msg, ...args) => PROD_DEBUG && console.log(`[SVELTE PROD] ${msg}`, ...args);
      
      try {
        // Load the unified component bundle
        const bundleUrl = "{{ url_for('static', filename='build/js/hz-components.es.js') }}";
        debugLog("Loading component bundle from:", bundleUrl);
        
        // Dynamic import bundle
        import(bundleUrl).then(
          componentsModule => {
            debugLog("Component bundle imported:", Object.keys(componentsModule));
            
            // Find target element
            const targetElementId = '{{ component_id if component_id else component_name | lower + "-component" }}';
            const targetElement = document.getElementById(targetElementId);
            
            if (!targetElement) {
              throw new Error(`Target element #${targetElementId} not found`);
            }
            
            // Get component factory from registry
            const componentName = '{{ component_name | lower }}';
            const componentFactory = componentsModule.default[componentName];
            
            if (typeof componentFactory !== 'function') {
              console.error(`Component factory '${componentName}' not found in bundle:`, Object.keys(componentsModule.default));
              return;
            }
            
            // Mount component
            const props = {{ props | tojson | safe }};
            const component = componentFactory(targetElement, props);
            debugLog(`Component ${componentName} mounted successfully`);
          },
          error => {
            console.error(`Failed to import ${bundleUrl}:`, error);
          }
        );
      } catch (error) {
        console.error(`Error loading Svelte component {{ component_name }}:`, error);
      }
    </script>
    
    <style>
      /* Styles for the loading state */
      .svelte-component-loading {
        border: 1px solid #e2e8f0;
        border-radius: 0.375rem;
        padding: 0.5rem 0.75rem;
        margin: 0.25rem 0;
      }
      .svelte-component-loading .text-content {
        font-weight: bold;
        font-size: 1.1rem;
      }
      .svelte-component-loading .translations {
        font-size: 0.875rem;
        color: #64748b;
      }
    </style>
  {% endif %}
{% endmacro %} 