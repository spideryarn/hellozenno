{% macro load_svelte_component(component_name, props={}, component_id='') %}
  {# Create div with a unique ID for the component to mount to #}
  <div id="{{ component_id if component_id else component_name | lower + '-component' }}" data-svelte-component="{{ component_name }}">
    {# Empty target div for component to mount to #}
  </div>
  {% if not config.IS_PRODUCTION %}
    {# Development mode - use Vite dev server #}
    <script type="module">
      // Debug flags - disabled in normal operation, can be enabled for troubleshooting
      const SVELTE_DEBUG = true;
      const debugLog = (msg, ...args) => {
        SVELTE_DEBUG && console.log(`[SVELTE DEBUG] ${msg}`, ...args);
      };
      
      // Log initial attempt
      debugLog(`Starting mount for ${JSON.stringify({
        component: "{{ component_name }}",
        mountPoint: "{{ component_id if component_id else component_name | lower + '-component' }}",
        props: {{ props | tojson | safe }},
        viteDev: true
      })}`);
      
      // Mount the component after DOM is fully loaded
      document.addEventListener('DOMContentLoaded', () => {
        const targetElement = document.getElementById('{{ component_id if component_id else component_name | lower + "-component" }}');
        debugLog("Target element:", targetElement);
        
        if (!targetElement) {
          console.error(`Target element #{{ component_id if component_id else component_name | lower + "-component" }} not found`);
          return;
        }
        
        // In development mode, directly import from the Vite server
        debugLog("Using direct import from Vite dev server");
        
        // We need to import the index.ts file first to ensure all components are registered
        import(`http://localhost:5173/src/entries/index.ts`).then(() => {
          // Then import the specific component module
          return import(`http://localhost:5173/src/entries/{{ component_name | lower }}.ts`);
        }).then(module => {
          debugLog("Component module loaded:", module);
          
          if (!module.default) {
            throw new Error("Module does not have a default export");
          }
          
          // Prepare props for the component
          const props = {{ props | tojson | safe }};
          debugLog("Mounting with props:", props);
          
          // Clear any loading state
          targetElement.innerHTML = '';
          
          // Mount the component using the default export (which is a function that creates the component)
          const component = module.default(targetElement, props);
          debugLog("Component mounted successfully");
        }).catch(error => {
          console.error("Error loading component:", error);
        });
      });
    </script>
  {% else %}
    {# Production mode - use built files #}
    <script type="module">
      // Debug flags for troubleshooting production issues
      const PROD_DEBUG = true;
      const debugLog = (msg, ...args) => PROD_DEBUG && console.log(`[SVELTE PROD] ${msg}`, ...args);
      
      // Wait for DOM to be fully loaded
      document.addEventListener('DOMContentLoaded', () => {
        try {
          // Find target element
          const targetElementId = '{{ component_id if component_id else component_name | lower + "-component" }}';
          const targetElement = document.getElementById(targetElementId);
          
          if (!targetElement) {
            console.error(`Target element #${targetElementId} not found`);
            return;
          }
          
          // Load the unified component bundle
          const bundleUrl = "{{ url_for('static', filename='build/js/hz-components.es.js') }}";
          debugLog("Loading component bundle from:", bundleUrl);
          
          // Dynamic import bundle
          import(bundleUrl).then(componentsModule => {
            debugLog("Component bundle imported:", Object.keys(componentsModule));
            
            // Get component factory from registry
            const componentName = '{{ component_name | lower }}';
            const componentFactory = componentsModule.default[componentName];
            
            if (typeof componentFactory !== 'function') {
              console.error(`Component factory '${componentName}' not found in bundle:`, 
                componentsModule.default ? Object.keys(componentsModule.default) : 'No components available');
              return;
            }
            
            // Clear loading state
            targetElement.innerHTML = '';
            
            // Mount component
            const props = {{ props | tojson | safe }};
            const component = componentFactory(targetElement, props);
            debugLog(`Component ${componentName} mounted successfully`);
          }).catch(error => {
            console.error(`Failed to import ${bundleUrl}:`, error);
          });
        } catch (error) {
          console.error(`Error loading Svelte component {{ component_name }}:`, error);
        }
      });
    </script>
    
    {# No loading style needed anymore #}
  {% endif %}
{% endmacro %} 