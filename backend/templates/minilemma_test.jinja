{% extends "base.jinja" %}
{% from "base_svelte.jinja" import load_svelte_component %}

{% set vite_entries = ['minilemma'] %}

{% block head_imports %}
{{ super() }}
<script>
    // Debug script that runs when page loads
    console.log('MiniLemma test page loaded');
    
    // Event listener for errors
    window.addEventListener('error', function(event) {
        console.error('Script error:', event);
    });
</script>
{% endblock head_imports %}

{% block title %}
MiniLemma Test - Hello Zenno
{% endblock title %}

{% block breadcrumbs %}
<span>MiniLemma Test</span>
{% endblock breadcrumbs %}

{% block content %}
<div class="container">
    <div class="content-box">
        <h1>MiniLemma Component Test</h1>
        <p>This is a dedicated page for testing the MiniLemma Svelte component.</p>
        
        <!-- Show the data we're passing -->
        <h2>Component Data:</h2>
        <pre>{{ sample_lemma | tojson }}</pre>
        
        <!-- MiniLemma Svelte component mount point -->
        <h2>Svelte Component:</h2>
        <div id="mini-lemma-test"></div>
        {{ load_svelte_component('MiniLemma', sample_lemma, component_id='mini-lemma-test') }}
        
        <!-- Debug info -->
        <h2>Debug Info</h2>
        <button onclick="debugSvelte()">Run Debug Check</button>
        <div id="debug-output" style="background: #f5f5f5; padding: 10px; border-radius: 5px; margin-top: 10px; white-space: pre; font-family: monospace;"></div>
        
        <script>
        function debugSvelte() {
            const output = document.getElementById('debug-output');
            const mountPoint = document.getElementById('mini-lemma-test');
            
            let debugInfo = '';
            
            // Check mount point
            debugInfo += `Mount point exists: ${mountPoint !== null}\n`;
            if (mountPoint) {
                debugInfo += `Mount point HTML: ${mountPoint.outerHTML}\n`;
                debugInfo += `Mount point children: ${mountPoint.children.length}\n`;
            }
            
            // Check script tags
            const moduleScripts = document.querySelectorAll('script[type="module"]');
            debugInfo += `\nModule scripts found: ${moduleScripts.length}\n`;
            
            // Check DOM for any Svelte-generated elements
            const svelteElements = document.querySelectorAll('.mini-lemma');
            debugInfo += `\nElements with .mini-lemma class: ${svelteElements.length}\n`;
            
            output.textContent = debugInfo;
        }
        </script>
        
        <!-- Manual rendering of what the component should look like -->
        <h2>HTML Fallback Version:</h2>
        <div class="mini-lemma">
            <a href="{{ sample_lemma.href }}" class="lemma-link">
                <div class="lemma-content">
                    <div class="lemma-text">{{ sample_lemma.lemma }}</div>
                    <div class="part-of-speech">{{ sample_lemma.partOfSpeech }}</div>
                    <div class="translations">{{ sample_lemma.translations | join(', ') }}</div>
                </div>
            </a>
        </div>
        
        <!-- Simple hardcoded version -->
        <h2>Hard-coded HTML Version:</h2>
        <div style="border: 2px solid red; padding: 10px; margin: 10px 0;">
            <h3>Mini Lemma Component (Hardcoded HTML)</h3>
            <p><strong>Lemma:</strong> γράφω</p>
            <p><strong>Part of Speech:</strong> verb</p>
            <p><strong>Translations:</strong> to write, to draw, to record</p>
            <a href="/lang/el/lemma/γράφω">View Details</a>
        </div>
    </div>
</div>
{% endblock content %}

{% block head_css %}
<style>
    .container {
        max-width: 800px;
        margin: 2rem auto;
        padding: 0 1rem;
    }
    
    .content-box {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        padding: 2rem;
    }
    
    h1 {
        color: #4a6ee0;
        margin-bottom: 1rem;
    }
    
    h2 {
        color: #4a6ee0;
        margin-top: 2rem;
        margin-bottom: 0.5rem;
    }
    
    p {
        color: #333;
        line-height: 1.6;
        margin-bottom: 1rem;
    }
    
    pre {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        padding: 1rem;
        overflow-x: auto;
        margin-bottom: 1.5rem;
    }
    
    /* Styles for the HTML fallback version */
    .mini-lemma {
        margin: 0.25rem 0;
    }

    .lemma-link {
        text-decoration: none;
        color: inherit;
        display: block;
    }

    .lemma-content {
        padding: 0.5rem 0.75rem;
        border: 1px solid #e2e8f0;
        border-radius: 0.375rem;
        transition: all 0.2s;
    }

    .lemma-content:hover {
        background-color: #f8fafc;
        border-color: #cbd5e1;
    }

    .lemma-text {
        font-size: 1.1rem;
        font-weight: bold;
        line-height: 1.4;
        margin-bottom: 0.125rem;
    }

    .part-of-speech {
        font-size: 0.875rem;
        color: #64748b;
        font-style: italic;
        line-height: 1.4;
        margin-bottom: 0.125rem;
    }

    .translations {
        font-size: 0.875rem;
        color: #64748b;
        line-height: 1.4;
    }
</style>
{% endblock head_css %}