{% extends "base.jinja" %}

{% block title %}
    URL Routes Test Page
{% endblock title %}

{% block content %}
<div class="container">
    <h1>URL Routes Registry Test</h1>
    
    <div>
        <h2>Available Routes</h2>
        <ul id="routes-list">
            <!-- Will be populated by JavaScript -->
        </ul>
    </div>
    
    <div>
        <h2>Test Route Resolution</h2>
        <form id="route-test-form">
            <div>
                <label for="route-name">Route Name:</label>
                <select id="route-name">
                    <!-- Will be populated by JavaScript -->
                </select>
            </div>
            <div id="route-params">
                <!-- Parameter inputs will be added dynamically -->
            </div>
            <button type="submit">Resolve Route</button>
        </form>
        
        <div>
            <h3>Result:</h3>
            <pre id="resolved-route"></pre>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const routesList = document.getElementById('routes-list');
    const routeNameSelect = document.getElementById('route-name');
    const routeParamsDiv = document.getElementById('route-params');
    const resolvedRouteEl = document.getElementById('resolved-route');
    const routeTestForm = document.getElementById('route-test-form');
    
    // Populate the routes list and select dropdown
    if (window.ROUTES) {
        const routeNames = Object.keys(window.ROUTES).sort();
        
        routeNames.forEach(routeName => {
            // Add to list
            const li = document.createElement('li');
            li.textContent = `${routeName}: ${window.ROUTES[routeName]}`;
            routesList.appendChild(li);
            
            // Add to select
            const option = document.createElement('option');
            option.value = routeName;
            option.textContent = routeName;
            routeNameSelect.appendChild(option);
        });
    } else {
        routesList.innerHTML = '<li>No routes available</li>';
    }
    
    // When a route is selected, show its parameters
    routeNameSelect.addEventListener('change', () => {
        const routeName = routeNameSelect.value;
        const routePath = window.ROUTES[routeName];
        
        // Clear existing params
        routeParamsDiv.innerHTML = '';
        
        // Find parameters in the route template (e.g., {param_name})
        const paramMatches = routePath.match(/\{([^}]+)\}/g) || [];
        const params = paramMatches.map(match => match.slice(1, -1)); // Remove { }
        
        // Create input fields for each parameter
        params.forEach(param => {
            const div = document.createElement('div');
            div.innerHTML = `
                <label for="param-${param}">${param}:</label>
                <input type="text" id="param-${param}" name="${param}" placeholder="${param}">
            `;
            routeParamsDiv.appendChild(div);
        });
    });
    
    // Trigger change to populate initial parameters
    routeNameSelect.dispatchEvent(new Event('change'));
    
    // Handle form submission
    routeTestForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        const routeName = routeNameSelect.value;
        
        // Collect parameters
        const params = {};
        const paramInputs = routeParamsDiv.querySelectorAll('input');
        paramInputs.forEach(input => {
            params[input.name] = input.value;
        });
        
        // Resolve the route
        const resolvedRoute = window.resolveRoute(routeName, params);
        
        // Display the result
        resolvedRouteEl.textContent = resolvedRoute;
    });
});
</script>
{% endblock content %}

{% block head_css %}
<style>
    .container {
        max-width: 900px;
        margin: 0 auto;
        padding: 20px;
    }
    
    #routes-list {
        max-height: 300px;
        overflow-y: auto;
        border: 1px solid #ddd;
        padding: 10px;
        font-family: monospace;
        margin-bottom: 20px;
    }
    
    #route-test-form div {
        margin-bottom: 10px;
    }
    
    #route-test-form label {
        display: inline-block;
        min-width: 120px;
    }
    
    #route-name {
        width: 300px;
    }
    
    #resolved-route {
        background-color: #f5f5f5;
        border: 1px solid #ddd;
        padding: 10px;
        font-family: monospace;
    }
</style>
{% endblock head_css %}